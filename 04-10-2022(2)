#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

struct Queue{
    int rear,front,size;
    int *arr;
    Queue(int s){
        size = s;
        front=rear=-1;
        arr= new int[s];
    }
    void enque(int x){
        if((front ==0 && (rear ==size-1) )||
         (rear == (front-1)%(size-1)))
         {
            cout<<"Queue is Full\n";
            return;
        }
        else if(front == -1){
            front = rear = 0;
            arr[front] = x;
        }
        else if(rear == size-1 && front != 0){
            rear = 0;
            arr[rear] = x;
        }else{
            rear++;
            arr[rear] = x;
        }
    }
    int deque(){
        if(front == -1){
            cout<<"Queue is Full";
            return 0;
        }
        int data = arr[front];
        arr[front] = -1;
        if(front == rear){
            front = rear = -1;
        }else if(front == size-1) {
            front = 0;
        }else{
            front++;
        }

        return data;
    }
     void display()
    {
    if (front == -1){
        cout<<"\nQueue is Empty";
        return;
    }
    if (rear >= front){
        for (int i = front; i <= rear; i++)
            cout<<arr[i]<<" ";
    }
    else{
        for (int i = front; i < size; i++)
            cout<<arr[i]<<" ";
        for (int i = 0; i <= rear; i++)
           cout<<arr[i]<<" ";      
     }
    }
};


int main() {
    int n,Z;
    cin>>n;
    cin>>Z;
    Queue q(n);
    for(int i =0;i<n;i++){
        int x;
        cin>>x;
        q.enque(x);
    }
    for(int j=0;j<Z;j++){
        int T;cin>>T;
         if(T==1){
             int E;
             E = q.deque();
             q.enque(E);
         }
        else if(T==0){
            q.deque();
        }
    }
    q.display();
    return 0;
}
